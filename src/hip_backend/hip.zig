const std = @import("std");
pub const c = @cImport({
    @cInclude("hip.h");
    @cInclude("hip/hip_runtime.h");
});

const CuintHipError = enum(c_uint) {
    hipSuccess = 0,
    hipErrorInvalidValue = 1,
    hipErrorOutOfMemory = 2,
    hipErrorNotInitialized = 3,
    hipErrorDeinitialized = 4,
    hipErrorProfilerDisabled = 5,
    hipErrorProfilerNotInitialized = 6,
    hipErrorProfilerAlreadyStarted = 7,
    hipErrorProfilerAlreadyStopped = 8,
    hipErrorInvalidConfiguration = 9,
    hipErrorInvalidPitchValue = 12,
    hipErrorInvalidSymbol = 13,
    hipErrorInvalidDevicePointer = 17,
    hipErrorInvalidMemcpyDirection = 21,
    hipErrorInsufficientDriver = 35,
    hipErrorMissingConfiguration = 52,
    hipErrorPriorLaunchFailure = 53,
    hipErrorInvalidDeviceFunction = 98,
    hipErrorNoDevice = 100,
    hipErrorInvalidDevice = 101,
    hipErrorInvalidImage = 200,
    hipErrorInvalidContext = 201,
    hipErrorContextAlreadyCurrent = 202,
    hipErrorMapFailed = 205,
    hipErrorUnmapFailed = 206,
    hipErrorArrayIsMapped = 207,
    hipErrorAlreadyMapped = 208,
    hipErrorNoBinaryForGpu = 209,
    hipErrorAlreadyAcquired = 210,
    hipErrorNotMapped = 211,
    hipErrorNotMappedAsArray = 212,
    hipErrorNotMappedAsPointer = 213,
    hipErrorECCNotCorrectable = 214,
    hipErrorUnsupportedLimit = 215,
    hipErrorContextAlreadyInUse = 216,
    hipErrorPeerAccessUnsupported = 217,
    hipErrorInvalidKernelFile = 218,
    hipErrorInvalidGraphicsContext = 219,
    hipErrorInvalidSource = 300,
    hipErrorFileNotFound = 301,
    hipErrorSharedObjectSymbolNotFound = 302,
    hipErrorSharedObjectInitFailed = 303,
    hipErrorOperatingSystem = 304,
    hipErrorInvalidHandle = 400,
    hipErrorIllegalState = 401,
    hipErrorNotFound = 500,
    hipErrorNotReady = 600,
    hipErrorIllegalAddress = 700,
    hipErrorLaunchOutOfResources = 701,
    hipErrorLaunchTimeOut = 702,
    hipErrorPeerAccessAlreadyEnabled = 706,
    hipErrorPeerAccessNotEnabled = 707,
    hipErrorSetOnActiveProcess = 708,
    hipErrorContextIsDestroyed = 709,
    hipErrorAssert = 710,
    hipErrorHostMemoryAlreadyRegistered = 712,
    hipErrorHostMemoryNotRegistered = 713,
    hipErrorLaunchFailure = 719,
    hipErrorCooperativeLaunchTooLarge = 720,
    hipErrorNotSupported = 801,
    hipErrorStreamCaptureUnsupported = 900,
    hipErrorStreamCaptureInvalidated = 901,
    hipErrorStreamCaptureMerge = 902,
    hipErrorStreamCaptureUnmatched = 903,
    hipErrorStreamCaptureUnjoined = 904,
    hipErrorStreamCaptureIsolation = 905,
    hipErrorStreamCaptureImplicit = 906,
    hipErrorCapturedEvent = 907,
    hipErrorStreamCaptureWrongThread = 908,
    hipErrorGraphExecUpdateFailure = 910,
    hipErrorUnknown = 999,
    hipErrorRuntimeMemory = 1052,
    hipErrorRuntimeOther = 1053,
};

pub const HipError = error{
    InvalidValue,
    OutOfMemory,
    NotInitialized,
    Deinitialized,
    ProfilerDisabled,
    ProfilerNotInitialized,
    ProfilerAlreadyStarted,
    ProfilerAlreadyStopped,
    InvalidConfiguration,
    InvalidPitchValue,
    InvalidSymbol,
    InvalidDevicePointer,
    InvalidMemcpyDirection,
    InsufficientDriver,
    MissingConfiguration,
    PriorLaunchFailure,
    InvalidDeviceFunction,
    NoDevice,
    InvalidDevice,
    InvalidImage,
    InvalidContext,
    ContextAlreadyCurrent,
    MapFailed,
    UnmapFailed,
    ArrayIsMapped,
    AlreadyMapped,
    NoBinaryForGpu,
    AlreadyAcquired,
    NotMapped,
    NotMappedAsArray,
    NotMappedAsPointer,
    ECCNotCorrectable,
    UnsupportedLimit,
    ContextAlreadyInUse,
    PeerAccessUnsupported,
    InvalidKernelFile,
    InvalidGraphicsContext,
    InvalidSource,
    FileNotFound,
    SharedObjectSymbolNotFound,
    SharedObjectInitFailed,
    OperatingSystem,
    InvalidHandle,
    IllegalState,
    NotFound,
    NotReady,
    IllegalAddress,
    LaunchOutOfResources,
    LaunchTimeOut,
    PeerAccessAlreadyEnabled,
    PeerAccessNotEnabled,
    SetOnActiveProcess,
    ContextIsDestroyed,
    Assert,
    HostMemoryAlreadyRegistered,
    HostMemoryNotRegistered,
    LaunchFailure,
    CooperativeLaunchTooLarge,
    NotSupported,
    StreamCaptureUnsupported,
    StreamCaptureInvalidated,
    StreamCaptureMerge,
    StreamCaptureUnmatched,
    StreamCaptureUnjoined,
    StreamCaptureIsolation,
    StreamCaptureImplicit,
    CapturedEvent,
    StreamCaptureWrongThread,
    GraphExecUpdateFailure,
    Unknown,
    RuntimeMemory,
    RuntimeOther,

    Tbd, // Marker that more error codes are needed.
};

pub fn checkError(hip_error: c_uint) HipError!void {
    switch (hip_error) {
        @intFromEnum(CuintHipError.hipSuccess) => {},
        @intFromEnum(CuintHipError.hipErrorInvalidValue) => return HipError.InvalidValue,
        @intFromEnum(CuintHipError.hipErrorOutOfMemory) => return HipError.OutOfMemory,
        @intFromEnum(CuintHipError.hipErrorNotInitialized) => return HipError.NotInitialized,
        @intFromEnum(CuintHipError.hipErrorDeinitialized) => return HipError.Deinitialized,
        @intFromEnum(CuintHipError.hipErrorProfilerDisabled) => return HipError.ProfilerDisabled,
        @intFromEnum(CuintHipError.hipErrorProfilerNotInitialized) => return HipError.ProfilerNotInitialized,
        @intFromEnum(CuintHipError.hipErrorProfilerAlreadyStarted) => return HipError.ProfilerAlreadyStarted,
        @intFromEnum(CuintHipError.hipErrorProfilerAlreadyStopped) => return HipError.ProfilerAlreadyStopped,
        @intFromEnum(CuintHipError.hipErrorInvalidConfiguration) => return HipError.InvalidConfiguration,
        @intFromEnum(CuintHipError.hipErrorInvalidPitchValue) => return HipError.InvalidPitchValue,
        @intFromEnum(CuintHipError.hipErrorInvalidSymbol) => return HipError.InvalidSymbol,
        @intFromEnum(CuintHipError.hipErrorInvalidDevicePointer) => return HipError.InvalidDevicePointer,
        @intFromEnum(CuintHipError.hipErrorInvalidMemcpyDirection) => return HipError.InvalidMemcpyDirection,
        @intFromEnum(CuintHipError.hipErrorInsufficientDriver) => return HipError.InsufficientDriver,
        @intFromEnum(CuintHipError.hipErrorMissingConfiguration) => return HipError.MissingConfiguration,
        @intFromEnum(CuintHipError.hipErrorPriorLaunchFailure) => return HipError.PriorLaunchFailure,
        @intFromEnum(CuintHipError.hipErrorInvalidDeviceFunction) => return HipError.InvalidDeviceFunction,
        @intFromEnum(CuintHipError.hipErrorNoDevice) => return HipError.NoDevice,
        @intFromEnum(CuintHipError.hipErrorInvalidDevice) => return HipError.InvalidDevice,
        @intFromEnum(CuintHipError.hipErrorInvalidImage) => return HipError.InvalidImage,
        @intFromEnum(CuintHipError.hipErrorInvalidContext) => return HipError.InvalidContext,
        @intFromEnum(CuintHipError.hipErrorContextAlreadyCurrent) => return HipError.ContextAlreadyCurrent,
        @intFromEnum(CuintHipError.hipErrorMapFailed) => return HipError.MapFailed,
        @intFromEnum(CuintHipError.hipErrorUnmapFailed) => return HipError.UnmapFailed,
        @intFromEnum(CuintHipError.hipErrorArrayIsMapped) => return HipError.ArrayIsMapped,
        @intFromEnum(CuintHipError.hipErrorAlreadyMapped) => return HipError.AlreadyMapped,
        @intFromEnum(CuintHipError.hipErrorNoBinaryForGpu) => return HipError.NoBinaryForGpu,
        @intFromEnum(CuintHipError.hipErrorAlreadyAcquired) => return HipError.AlreadyAcquired,
        @intFromEnum(CuintHipError.hipErrorNotMapped) => return HipError.NotMapped,
        @intFromEnum(CuintHipError.hipErrorNotMappedAsArray) => return HipError.NotMappedAsArray,
        @intFromEnum(CuintHipError.hipErrorNotMappedAsPointer) => return HipError.NotMappedAsPointer,
        @intFromEnum(CuintHipError.hipErrorECCNotCorrectable) => return HipError.ECCNotCorrectable,
        @intFromEnum(CuintHipError.hipErrorUnsupportedLimit) => return HipError.UnsupportedLimit,
        @intFromEnum(CuintHipError.hipErrorContextAlreadyInUse) => return HipError.ContextAlreadyInUse,
        @intFromEnum(CuintHipError.hipErrorPeerAccessUnsupported) => return HipError.PeerAccessUnsupported,
        @intFromEnum(CuintHipError.hipErrorInvalidKernelFile) => return HipError.InvalidKernelFile,
        @intFromEnum(CuintHipError.hipErrorInvalidGraphicsContext) => return HipError.InvalidGraphicsContext,
        @intFromEnum(CuintHipError.hipErrorInvalidSource) => return HipError.InvalidSource,
        @intFromEnum(CuintHipError.hipErrorFileNotFound) => return HipError.FileNotFound,
        @intFromEnum(CuintHipError.hipErrorSharedObjectSymbolNotFound) => return HipError.SharedObjectSymbolNotFound,
        @intFromEnum(CuintHipError.hipErrorSharedObjectInitFailed) => return HipError.SharedObjectInitFailed,
        @intFromEnum(CuintHipError.hipErrorOperatingSystem) => return HipError.OperatingSystem,
        @intFromEnum(CuintHipError.hipErrorInvalidHandle) => return HipError.InvalidHandle,
        @intFromEnum(CuintHipError.hipErrorIllegalState) => return HipError.IllegalState,
        @intFromEnum(CuintHipError.hipErrorNotFound) => return HipError.NotFound,
        @intFromEnum(CuintHipError.hipErrorNotReady) => return HipError.NotReady,
        @intFromEnum(CuintHipError.hipErrorIllegalAddress) => return HipError.IllegalAddress,
        @intFromEnum(CuintHipError.hipErrorLaunchOutOfResources) => return HipError.LaunchOutOfResources,
        @intFromEnum(CuintHipError.hipErrorLaunchTimeOut) => return HipError.LaunchTimeOut,
        @intFromEnum(CuintHipError.hipErrorPeerAccessAlreadyEnabled) => return HipError.PeerAccessAlreadyEnabled,
        @intFromEnum(CuintHipError.hipErrorPeerAccessNotEnabled) => return HipError.PeerAccessNotEnabled,
        @intFromEnum(CuintHipError.hipErrorSetOnActiveProcess) => return HipError.SetOnActiveProcess,
        @intFromEnum(CuintHipError.hipErrorContextIsDestroyed) => return HipError.ContextIsDestroyed,
        @intFromEnum(CuintHipError.hipErrorAssert) => return HipError.Assert,
        @intFromEnum(CuintHipError.hipErrorHostMemoryAlreadyRegistered) => return HipError.HostMemoryAlreadyRegistered,
        @intFromEnum(CuintHipError.hipErrorHostMemoryNotRegistered) => return HipError.HostMemoryNotRegistered,
        @intFromEnum(CuintHipError.hipErrorLaunchFailure) => return HipError.LaunchFailure,
        @intFromEnum(CuintHipError.hipErrorCooperativeLaunchTooLarge) => return HipError.CooperativeLaunchTooLarge,
        @intFromEnum(CuintHipError.hipErrorNotSupported) => return HipError.NotSupported,
        @intFromEnum(CuintHipError.hipErrorStreamCaptureUnsupported) => return HipError.StreamCaptureUnsupported,
        @intFromEnum(CuintHipError.hipErrorStreamCaptureInvalidated) => return HipError.StreamCaptureInvalidated,
        @intFromEnum(CuintHipError.hipErrorStreamCaptureMerge) => return HipError.StreamCaptureMerge,
        @intFromEnum(CuintHipError.hipErrorStreamCaptureUnmatched) => return HipError.StreamCaptureUnmatched,
        @intFromEnum(CuintHipError.hipErrorStreamCaptureUnjoined) => return HipError.StreamCaptureUnjoined,
        @intFromEnum(CuintHipError.hipErrorStreamCaptureIsolation) => return HipError.StreamCaptureIsolation,
        @intFromEnum(CuintHipError.hipErrorStreamCaptureImplicit) => return HipError.StreamCaptureImplicit,
        @intFromEnum(CuintHipError.hipErrorCapturedEvent) => return HipError.CapturedEvent,
        @intFromEnum(CuintHipError.hipErrorStreamCaptureWrongThread) => return HipError.StreamCaptureWrongThread,
        @intFromEnum(CuintHipError.hipErrorGraphExecUpdateFailure) => return HipError.GraphExecUpdateFailure,
        @intFromEnum(CuintHipError.hipErrorUnknown) => return HipError.Unknown,
        @intFromEnum(CuintHipError.hipErrorRuntimeMemory) => return HipError.RuntimeMemory,
        @intFromEnum(CuintHipError.hipErrorRuntimeOther) => return HipError.RuntimeOther,
        else => return HipError.Tbd,
    }
}

pub fn printDeviceProperties(device_id: c_int) !void {
    var device_prop: c.hipDevicePropWithoutArchFlags_t = undefined;
    try checkError(c.hipGetDevicePropertiesWithoutArchFlags(&device_prop, device_id));

    std.log.debug("Device id = {any}", .{device_id});
    std.log.debug("      name = {s}", .{device_prop.name});
    std.log.debug("      warpSize = {any}", .{device_prop.warpSize});
    std.log.debug("      totalGlobalMem = {d}GB", .{@as(f32, @floatFromInt(device_prop.totalGlobalMem)) / (1024.0 * 1024.0 * 1024.0)});
    std.log.debug("      sharedMemPerBlock = {d}KB", .{@as(f32, @floatFromInt(device_prop.sharedMemPerBlock)) / 1024.0});
    std.log.debug("      regsPerBlock = {any}", .{device_prop.regsPerBlock});
    std.log.debug("      maxThreadsPerBlock = {any}", .{device_prop.maxThreadsPerBlock});
    std.log.debug("      integrated = {any}", .{device_prop.integrated});
    std.log.debug("      gcnArchName = {s}", .{device_prop.gcnArchName});
}
